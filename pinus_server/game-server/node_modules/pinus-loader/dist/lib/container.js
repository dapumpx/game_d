"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Container to be used by this library for inversion control. If container was not implicitly set then by default
 * container simply creates a new instance of the given class.
 */
exports.defaultContainer = new (class {
    constructor() {
        this.instances = [];
    }
    get(someClass) {
        let instance = this.instances.find(instance => instance.type === someClass);
        if (!instance) {
            instance = { type: someClass, object: new someClass() };
            this.instances.push(instance);
        }
        return instance.object;
    }
    unbind(someClass) {
        let idx = this.instances.findIndex(instance => instance.type === someClass);
        if (idx >= 0) {
            this.instances.splice(idx, 1);
        }
    }
})();
let userContainer;
let userContainerOptions;
/**
 * Sets container to be used by this library.
 */
function useContainer(iocContainer, options) {
    userContainer = iocContainer;
    userContainerOptions = options;
}
exports.useContainer = useContainer;
function isUseContainer() {
    return userContainer !== undefined;
}
exports.isUseContainer = isUseContainer;
/**
 * Gets the IOC container used by this library.
 */
function getFromContainer(someClass) {
    if (userContainer) {
        try {
            const instance = userContainer.get(someClass);
            if (instance)
                return instance;
            if (!userContainerOptions || !userContainerOptions.fallback)
                return instance;
        }
        catch (error) {
            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)
                throw error;
        }
    }
    return exports.defaultContainer.get(someClass);
}
exports.getFromContainer = getFromContainer;
/**
 * Remove object from the IOC container used by this library.
 */
function removeFromContainer(someClass) {
    if (userContainer) {
        try {
            userContainer.unbind(someClass);
        }
        catch (error) {
            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)
                throw error;
        }
    }
    exports.defaultContainer.unbind(someClass);
}
exports.removeFromContainer = removeFromContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2NvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQW1CQTs7O0dBR0c7QUFDVSxRQUFBLGdCQUFnQixHQUFpRixJQUFJLENBQUM7SUFBQTtRQUN2RyxjQUFTLEdBQXNDLEVBQUUsQ0FBQztJQWlCOUQsQ0FBQztJQWZHLEdBQUcsQ0FBSSxTQUFzQztRQUN6QyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUM7UUFDNUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ1osUUFBUSxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQ3hELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUMzQixDQUFDO0lBQ0QsTUFBTSxDQUFJLFNBQXVCO1FBQzdCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQztRQUM1RSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsQyxDQUFDO0lBQ0wsQ0FBQztDQUNKLENBQUMsRUFBRSxDQUFDO0FBRUwsSUFBSSxhQUEyRixDQUFDO0FBQ2hHLElBQUksb0JBQW1ELENBQUM7QUFFeEQ7O0dBRUc7QUFDSCxzQkFBNkIsWUFBMEYsRUFBRSxPQUE2QjtJQUNsSixhQUFhLEdBQUcsWUFBWSxDQUFDO0lBQzdCLG9CQUFvQixHQUFHLE9BQU8sQ0FBQztBQUNuQyxDQUFDO0FBSEQsb0NBR0M7QUFFRDtJQUNJLE1BQU0sQ0FBQyxhQUFhLEtBQUssU0FBUyxDQUFDO0FBQ3ZDLENBQUM7QUFGRCx3Q0FFQztBQUVEOztHQUVHO0FBQ0gsMEJBQW9DLFNBQXFCO0lBQ3JELEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDO1lBQ0QsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM5QyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUM7Z0JBQ1QsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUVwQixFQUFFLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDO2dCQUN4RCxNQUFNLENBQUMsUUFBUSxDQUFDO1FBRXhCLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDO2dCQUNoRSxNQUFNLEtBQUssQ0FBQztRQUNwQixDQUFDO0lBQ0wsQ0FBQztJQUNELE1BQU0sQ0FBQyx3QkFBZ0IsQ0FBQyxHQUFHLENBQUksU0FBUyxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQWhCRCw0Q0FnQkM7QUFFRDs7R0FFRztBQUNILDZCQUF1QyxTQUFxQjtJQUN4RCxFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQztZQUNELGFBQWEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixJQUFJLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ2hFLE1BQU0sS0FBSyxDQUFDO1FBQ3BCLENBQUM7SUFDTCxDQUFDO0lBQ0Qsd0JBQWdCLENBQUMsTUFBTSxDQUFJLFNBQVMsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFWRCxrREFVQyJ9