"use strict";
// import * as bluebird from "bluebird"
Object.defineProperty(exports, "__esModule", { value: true });
const preload_1 = require("./preload");
preload_1.preload();
// // 使用bluebird输出完整的promise调用链
// global.Promise = bluebird.Promise;
// // 开启长堆栈
// bluebird.config({
//     // Enable warnings
//     warnings: false,
//     // Enable long stack traces
//     longStackTraces: false,
//     // Enable cancellation
//     cancellation: false,
//     // Enable monitoring
//     monitoring: false
// });
const index_1 = require("../index");
const pinus_logger_1 = require("pinus-logger");
pinus_logger_1.configure('./config/log4js.json');
// remote service interface path info list
let records = [{
        namespace: 'user',
        serverType: 'test',
        path: __dirname + '/remote/test'
    }];
let context = {
    serverId: 'test-server-1'
};
// server info list
let servers = [{
        id: 'test-server-1',
        serverType: 'test',
        host: '127.0.0.1',
        port: 3333
    }];
// route parameter passed to route function
let routeParam = null;
// route context passed to route function
let routeContext = servers;
// route function to caculate the remote server id
let routeFunc = function (session, msg, context, cb) {
    cb(null, context[0].id);
};
let client = new index_1.RpcClient({
    routeContext: servers,
    router: routeFunc,
    context: context,
    pendingSize: 10000000000
});
let start = null;
client.start(async function (err) {
    console.log('rpc client start ok.');
    client.addProxies(records);
    client.addServers(servers);
    start = Date.now();
    // runSerial();
    // runParallels();
    runOnlySends();
});
let num_requests = 100000;
let times = 0;
let mock_data_1 = 'hello';
let mock_data_2 = 'hello';
let num_repeat = 200; // 100 200 300 400 800
for (let i = 0; i < num_repeat; i++) {
    mock_data_2 += mock_data_1;
}
let mock_data_3 = {
    a: 'run',
    b: mock_data_2 + Date.now() + '_',
    time: Date.now()
};
let payload = mock_data_3;
// console.log(new Buffer(payload).length / 1024 + 'k');
console.log(new Buffer(JSON.stringify(payload)).length / 1024 + 'k');
async function runParallels() {
    let maxParallel = 1;
    while (true) {
        if (maxParallel > 10000) {
            maxParallel = 10000;
        }
        let now = Date.now();
        start = now;
        await runParallel(maxParallel);
        now = Date.now();
        let cost = now - start;
        console.log(`runParallel ${num_requests} num requests(maxParallel:${maxParallel}) cost ${cost}ms , ${(num_requests / (cost / 1000)).toFixed(2)}ops/sec`);
        maxParallel = maxParallel * 2;
    }
}
async function runParallel(maxParallel) {
    let all = [];
    for (let times = 0; times < num_requests; times++) {
        all.push(rpcRequest(payload));
        if (all.length === maxParallel) {
            await Promise.all(all);
            all.length = 0;
        }
    }
    await Promise.all(all);
}
async function runSerial() {
    if (times > num_requests) {
        return;
    }
    if (times === num_requests) {
        let now = Date.now();
        let cost = now - start;
        console.log(`runSerial ${num_requests} num requests cost ${cost}ms , ${(num_requests / (cost / 1000)).toFixed(2)}ops/sec`);
        times = 0;
        start = now;
        // return;
        await runSerial();
        return;
    }
    times++;
    await rpcRequest(payload);
    runSerial();
}
async function rpcRequest(param) {
    let result = await client.proxies.user.test.service.echo(routeParam, mock_data_1, 123);
    // console.log(count++);
}
async function runOnlySends() {
    let maxParallel = 1;
    while (true) {
        if (maxParallel > 10000) {
            maxParallel = 10000;
        }
        let now = Date.now();
        start = now;
        runOnlySend(maxParallel);
        now = Date.now();
        let cost = now - start;
        console.log(`runOnlySend ${num_requests} num requests(maxParallel:${maxParallel}) cost ${cost}ms , ${(num_requests / (cost / 1000)).toFixed(2)}ops/sec`);
        maxParallel = maxParallel * 2;
    }
}
function runOnlySend(maxParallel) {
    for (let times = 0; times < num_requests; times++) {
        rpcRequest(payload);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuY2hfY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc2FtcGxlL2JlbmNoX2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsdUNBQXVDOztBQUV2Qyx1Q0FBa0M7QUFDbEMsaUJBQU8sRUFBRSxDQUFDO0FBR1YsK0JBQStCO0FBQy9CLHFDQUFxQztBQUNyQyxXQUFXO0FBQ1gsb0JBQW9CO0FBQ3BCLHlCQUF5QjtBQUN6Qix1QkFBdUI7QUFDdkIsa0NBQWtDO0FBQ2xDLDhCQUE4QjtBQUM5Qiw2QkFBNkI7QUFDN0IsMkJBQTJCO0FBQzNCLDJCQUEyQjtBQUMzQix3QkFBd0I7QUFDeEIsTUFBTTtBQUdOLG9DQUF5RTtBQUN6RSwrQ0FBeUM7QUFDekMsd0JBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBRWxDLDBDQUEwQztBQUMxQyxJQUFJLE9BQU8sR0FBRyxDQUFDO1FBQ2IsU0FBUyxFQUFFLE1BQU07UUFDakIsVUFBVSxFQUFFLE1BQU07UUFDbEIsSUFBSSxFQUFFLFNBQVMsR0FBRyxjQUFjO0tBQ2pDLENBQUMsQ0FBQztBQUVILElBQUksT0FBTyxHQUFHO0lBQ1osUUFBUSxFQUFFLGVBQWU7Q0FDMUIsQ0FBQztBQUVGLG1CQUFtQjtBQUNuQixJQUFJLE9BQU8sR0FDVCxDQUFDO1FBQ0MsRUFBRSxFQUFFLGVBQWU7UUFDbkIsVUFBVSxFQUFFLE1BQU07UUFDbEIsSUFBSSxFQUFFLFdBQVc7UUFDakIsSUFBSSxFQUFFLElBQUk7S0FDWCxDQUFDLENBQUM7QUFDTCwyQ0FBMkM7QUFDM0MsSUFBSSxVQUFVLEdBQVcsSUFBSSxDQUFDO0FBRTlCLHlDQUF5QztBQUN6QyxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUM7QUFHM0Isa0RBQWtEO0FBQ2xELElBQUksU0FBUyxHQUFHLFVBQVUsT0FBK0IsRUFBRSxHQUFXLEVBQUUsT0FBcUIsRUFBRSxFQUEyQztJQUN4SSxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8s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